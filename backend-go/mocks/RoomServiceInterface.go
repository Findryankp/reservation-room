// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	rooms "groupproject3-airbnb-api/features/rooms"
)

// RoomServiceInterface is an autogenerated mock type for the RoomServiceInterface type
type RoomServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: roomEntity, userId, fileData
func (_m *RoomServiceInterface) Create(roomEntity rooms.RoomEntity, userId uint, fileData multipart.FileHeader) (rooms.RoomEntity, error) {
	ret := _m.Called(roomEntity, userId, fileData)

	var r0 rooms.RoomEntity
	if rf, ok := ret.Get(0).(func(rooms.RoomEntity, uint, multipart.FileHeader) rooms.RoomEntity); ok {
		r0 = rf(roomEntity, userId, fileData)
	} else {
		r0 = ret.Get(0).(rooms.RoomEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rooms.RoomEntity, uint, multipart.FileHeader) error); ok {
		r1 = rf(roomEntity, userId, fileData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id, userId
func (_m *RoomServiceInterface) Delete(id uint, userId uint) error {
	ret := _m.Called(id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *RoomServiceInterface) GetAll() ([]rooms.RoomEntity, error) {
	ret := _m.Called()

	var r0 []rooms.RoomEntity
	if rf, ok := ret.Get(0).(func() []rooms.RoomEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.RoomEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFilter provides a mock function with given fields: roomFilter
func (_m *RoomServiceInterface) GetAllFilter(roomFilter rooms.RoomFilter) ([]rooms.RoomEntity, error) {
	ret := _m.Called(roomFilter)

	var r0 []rooms.RoomEntity
	if rf, ok := ret.Get(0).(func(rooms.RoomFilter) []rooms.RoomEntity); ok {
		r0 = rf(roomFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.RoomEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rooms.RoomFilter) error); ok {
		r1 = rf(roomFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *RoomServiceInterface) GetById(id uint) (rooms.RoomEntity, error) {
	ret := _m.Called(id)

	var r0 rooms.RoomEntity
	if rf, ok := ret.Get(0).(func(uint) rooms.RoomEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(rooms.RoomEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: userId, userIdLogin
func (_m *RoomServiceInterface) GetByUserId(userId uint, userIdLogin uint) ([]rooms.RoomEntity, error) {
	ret := _m.Called(userId, userIdLogin)

	var r0 []rooms.RoomEntity
	if rf, ok := ret.Get(0).(func(uint, uint) []rooms.RoomEntity); ok {
		r0 = rf(userId, userIdLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.RoomEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, userIdLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: roomEntity, id, userId, fileData
func (_m *RoomServiceInterface) Update(roomEntity rooms.RoomEntity, id uint, userId uint, fileData multipart.FileHeader) (rooms.RoomEntity, error) {
	ret := _m.Called(roomEntity, id, userId, fileData)

	var r0 rooms.RoomEntity
	if rf, ok := ret.Get(0).(func(rooms.RoomEntity, uint, uint, multipart.FileHeader) rooms.RoomEntity); ok {
		r0 = rf(roomEntity, id, userId, fileData)
	} else {
		r0 = ret.Get(0).(rooms.RoomEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rooms.RoomEntity, uint, uint, multipart.FileHeader) error); ok {
		r1 = rf(roomEntity, id, userId, fileData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRoomServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoomServiceInterface creates a new instance of RoomServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoomServiceInterface(t mockConstructorTestingTNewRoomServiceInterface) *RoomServiceInterface {
	mock := &RoomServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
