// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	reservations "groupproject3-airbnb-api/features/reservations"

	mock "github.com/stretchr/testify/mock"
)

// ReservationServiceInterface is an autogenerated mock type for the ReservationServiceInterface type
type ReservationServiceInterface struct {
	mock.Mock
}

// CallBackMidtrans provides a mock function with given fields: id, status
func (_m *ReservationServiceInterface) CallBackMidtrans(id uint, status string) error {
	ret := _m.Called(id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckAvailability provides a mock function with given fields: reservationEntity
func (_m *ReservationServiceInterface) CheckAvailability(reservationEntity reservations.ReservationEntity) (bool, error) {
	ret := _m.Called(reservationEntity)

	var r0 bool
	if rf, ok := ret.Get(0).(func(reservations.ReservationEntity) bool); ok {
		r0 = rf(reservationEntity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reservations.ReservationEntity) error); ok {
		r1 = rf(reservationEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: reservationEntity
func (_m *ReservationServiceInterface) Create(reservationEntity reservations.ReservationEntity) (reservations.ReservationEntity, error) {
	ret := _m.Called(reservationEntity)

	var r0 reservations.ReservationEntity
	if rf, ok := ret.Get(0).(func(reservations.ReservationEntity) reservations.ReservationEntity); ok {
		r0 = rf(reservationEntity)
	} else {
		r0 = ret.Get(0).(reservations.ReservationEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reservations.ReservationEntity) error); ok {
		r1 = rf(reservationEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ReservationServiceInterface) GetById(id uint) (reservations.ReservationEntity, error) {
	ret := _m.Called(id)

	var r0 reservations.ReservationEntity
	if rf, ok := ret.Get(0).(func(uint) reservations.ReservationEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(reservations.ReservationEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoomId provides a mock function with given fields: roomId
func (_m *ReservationServiceInterface) GetByRoomId(roomId uint) ([]reservations.ReservationEntity, error) {
	ret := _m.Called(roomId)

	var r0 []reservations.ReservationEntity
	if rf, ok := ret.Get(0).(func(uint) []reservations.ReservationEntity); ok {
		r0 = rf(roomId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservations.ReservationEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservation provides a mock function with given fields: userId
func (_m *ReservationServiceInterface) GetReservation(userId uint) ([]reservations.ReservationEntity, error) {
	ret := _m.Called(userId)

	var r0 []reservations.ReservationEntity
	if rf, ok := ret.Get(0).(func(uint) []reservations.ReservationEntity); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservations.ReservationEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: reservationEntity, id
func (_m *ReservationServiceInterface) Update(reservationEntity reservations.ReservationEntity, id uint) (reservations.ReservationEntity, error) {
	ret := _m.Called(reservationEntity, id)

	var r0 reservations.ReservationEntity
	if rf, ok := ret.Get(0).(func(reservations.ReservationEntity, uint) reservations.ReservationEntity); ok {
		r0 = rf(reservationEntity, id)
	} else {
		r0 = ret.Get(0).(reservations.ReservationEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reservations.ReservationEntity, uint) error); ok {
		r1 = rf(reservationEntity, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReservationServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewReservationServiceInterface creates a new instance of ReservationServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReservationServiceInterface(t mockConstructorTestingTNewReservationServiceInterface) *ReservationServiceInterface {
	mock := &ReservationServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
